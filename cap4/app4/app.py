import streamlit as st
import pandas as pd
import plotly.express as px
import random

# --- Informa√ß√£o padr√£o m√≠nima ---
APP_INFO = {
    "title": "üí° Desafio Pr√°tico: Gerindo o Or√ßamento do Jo√£o",
    "description": "Cen√°rio inicial do Jo√£o, valores ser√£o atualizados aleatoriamente ao carregar a app."
}

# --- Fun√ß√µes ---
def gerar_cenario():
    """Gera valores aleat√≥rios para sal√°rio e despesas com step razo√°vel."""
    salario = random.randrange(1200, 3001, 50)
    renda = random.randrange(600, 1201, 50) / 2  # divide com a namorada
    alimentacao = random.randrange(150, 401, 10)
    eletrica_agua = random.randrange(30, 71, 5)
    ginasio = random.randrange(20, 51, 5)
    jantar = random.randrange(10, 41, 5)
    roupa = random.randrange(20, 101, 5)        # NOVO
    eletronica = random.randrange(10, 51, 5)    # NOVO
    carro = 300
    transporte = 40
    return salario, renda, alimentacao, eletrica_agua, ginasio, jantar, roupa, eletronica, carro, transporte

def atualizar_app_info(salario, renda, alimentacao, eletrica_agua, ginasio, jantar, roupa, eletronica, carro, transporte):
    """Atualiza APP_INFO com os valores do cen√°rio."""
    return {
        "title": "üí° Desafio Pr√°tico: Gerindo o Or√ßamento do Jo√£o",
        "description": (
            f"Jo√£o recebe {salario}‚Ç¨ por m√™s. A renda da casa √© de {renda*2:.0f}‚Ç¨, "
            f"mas ele divide a meias com a sua namorada, a Mariana.\n"
            f"Em alimenta√ß√£o costuma gastar {alimentacao}‚Ç¨ por m√™s. Eletricidade e √°gua custam {eletrica_agua}‚Ç¨ por pessoa.\n"
            f"Jo√£o paga {ginasio}‚Ç¨ de gin√°sio, jantar fora {jantar}‚Ç¨, roupa {roupa}‚Ç¨ e eletr√≥nica {eletronica}‚Ç¨.\n"
            f"Ele est√° a pensar comprar um carro ({carro}‚Ç¨) ou usar transporte p√∫blico ({transporte}‚Ç¨).\n\n"
            "O desafio √© aplicares a **regra 50/30/20** e perceberes o que faz sentido no or√ßamento."
        )
    }

def calcular_distribuicao(necessidades_val, desejos_val, poupanca_val):
    """Calcula a distribui√ß√£o e percentagens."""
    valor_total = necessidades_val + desejos_val + poupanca_val
    necessidades_pct = round(necessidades_val / valor_total * 100, 1)
    desejos_pct = round(desejos_val / valor_total * 100, 1)
    poupanca_pct = round(poupanca_val / valor_total * 100, 1)
    df = pd.DataFrame({
        "Categoria": ["Necessidades", "Desejos", "Poupan√ßa / Investimento"],
        "Valor (‚Ç¨)": [necessidades_val, desejos_val, poupanca_val],
        "Percentual (%)": [necessidades_pct, desejos_pct, poupanca_pct]
    })
    return df, poupanca_pct, valor_total

# --- Main ---
def run():
    if "cenario" not in st.session_state:
        st.session_state["cenario"] = gerar_cenario()
    salario, renda, alimentacao, eletrica_agua, ginasio, jantar, roupa, eletronica, carro, transporte = st.session_state["cenario"]

    APP_INFO = atualizar_app_info(salario, renda, alimentacao, eletrica_agua, ginasio, jantar, roupa, eletronica, carro, transporte)
    st.title(APP_INFO["title"])
    st.info(APP_INFO["description"])
    st.divider()

    st.subheader("üßÆ Calculadora do aluno")
    st.markdown("Preenche os valores que achas que Jo√£o gasta em cada categoria:")

    # Inputs do aluno
    salario_val = st.number_input("Sal√°rio Jo√£o (‚Ç¨)", min_value=0.0, value=100.0, step=50.0)
    necessidades_val = st.number_input("Necessidades (‚Ç¨) (renda, alimenta√ß√£o, eletricidade/√°gua)", min_value=0.0, value=100.0, step=5.0)
    desejos_val = st.number_input("Desejos/Lazer (‚Ç¨) (gin√°sio, jantar, roupa, eletr√≥nica)", min_value=0.0, value=100.0, step=5.0)
    poupanca_val = salario_val - (necessidades_val + desejos_val)

    # Distribui√ß√£o
    df, poupanca_pct, valor_total = calcular_distribuicao(necessidades_val, desejos_val, poupanca_val)
    st.info(f"‚ÑπÔ∏è Poupan√ßa: {poupanca_val}‚Ç¨ ({poupanca_pct}%)")

    st.markdown("### üíµ Distribui√ß√£o do or√ßamento")
    st.dataframe(df.style.format({"Valor (‚Ç¨)": "‚Ç¨{:.2f}", "Percentual (%)": "{:.1f}%"}))
    fig = px.pie(df, names="Categoria", values="Valor (‚Ç¨)",
                 title="Distribui√ß√£o do or√ßamento",
                 color_discrete_sequence=px.colors.qualitative.Pastel)
    st.plotly_chart(fig, use_container_width=True)

    st.divider()
    st.subheader("‚ùì Perguntas do desafio")

    # Pergunta 1
    st.markdown(f"1Ô∏è‚É£ Se Jo√£o n√£o comprar o carro ({carro} ‚Ç¨) e optar pelo transporte p√∫blico ({transporte} ‚Ç¨), quanto consegue poupar a mais?")
    resposta1 = st.number_input("Resposta (‚Ç¨)", min_value=0.0, value=0.0, step=1.0, key="resposta1")
    poupanca_extra = carro - transporte
    if st.button("Verificar Pergunta 1"):
        if resposta1 == poupanca_extra:
            st.success(f"‚úÖ Correto! Jo√£o poupa {poupanca_extra} ‚Ç¨ a mais.")
        else:
            st.error(f"‚ùå Incorreto. A resposta correta √© {poupanca_extra} ‚Ç¨.")

    # Pergunta 2
    st.markdown("2Ô∏è‚É£ Se Jo√£o reduzir os gastos com lazer em 20 ‚Ç¨, qual ser√° a nova taxa de poupan√ßa (%)?")
    valor_poupanca_novo = poupanca_val + 20
    nova_taxa_poupanca = round(valor_poupanca_novo / valor_total * 100, 1)
    resposta2 = st.number_input("Resposta (%)", min_value=0.0, max_value=100.0, value=0.0, step=0.1, key="resposta2")
    if st.button("Verificar Pergunta 2"):
        if round(resposta2, 1) == nova_taxa_poupanca:
            st.success(f"‚úÖ Correto! Nova taxa de poupan√ßa: {nova_taxa_poupanca} %")
        else:
            st.error(f"‚ùå Incorreto. A resposta correta √© {nova_taxa_poupanca} %")

    # Pergunta 3
    st.markdown("3Ô∏è‚É£ Jo√£o quer aumentar a poupan√ßa para pelo menos 25% do total. Qual estrat√©gia √© mais eficiente?")
    if df.loc[df['Categoria']=="Desejos", 'Percentual (%)'].values[0] < 10:
        st.info("üí° Aten√ß√£o: Jo√£o j√° gasta pouco em lazer, talvez seja mais eficiente aumentar os rendimentos.")
    opcoes = ["Aumentar sal√°rio", "Reduzir gastos com desejos e lazer", "Reduzir gastos essenciais"]
    resposta3 = st.radio("Escolhe a op√ß√£o:", opcoes, key="resposta3")
    if st.button("Verificar Pergunta 3"):
        if df.loc[df['Categoria']=="Desejos", 'Percentual (%)'].values[0] < 10 and resposta3 == "Aumentar sal√°rio":
            st.success("‚úÖ Correto! Como os gastos com lazer s√£o baixos, aumentar o sal√°rio √© mais eficiente.")
        elif df.loc[df['Categoria']=="Desejos", 'Percentual (%)'].values[0] >= 10 and resposta3 == "Reduzir gastos com desejos e lazer":
            st.success("‚úÖ Correto! Reduzir desejos/lazer aumenta a poupan√ßa sem comprometer necessidades.")
        else:
            st.error("‚ùå Incorreto. Rev√™ a distribui√ß√£o do or√ßamento para escolher a melhor estrat√©gia.")

    # Pergunta 4 - Carro
    st.markdown(f"4Ô∏è‚É£ Com o carro ({carro} ‚Ç¨), Jo√£o consegue manter poupan√ßa acima de 20%? Cabe no or√ßamento?")
    poupanca_com_carro = poupanca_val - carro + transporte
    taxa_com_carro = round(poupanca_com_carro / valor_total * 100, 1)
    resposta4 = st.radio("Escolhe a op√ß√£o:", ["Sim", "N√£o"], key="resposta4")
    if st.button("Verificar Pergunta 4"):
        if taxa_com_carro >= 20 and resposta4 == "Sim":
            st.success(f"‚úÖ Correto! A taxa de poupan√ßa seria {taxa_com_carro}%, ainda acima de 20%, ent√£o cabe no or√ßamento.")
        elif taxa_com_carro < 20 and resposta4 == "N√£o":
            st.success(f"‚úÖ Correto! A taxa de poupan√ßa seria {taxa_com_carro}%, abaixo de 20%, ent√£o n√£o cabe no or√ßamento.")
        else:
            st.error(f"‚ùå Incorreto. A taxa de poupan√ßa seria {taxa_com_carro}%.")

if __name__ == "__main__":
    run()
