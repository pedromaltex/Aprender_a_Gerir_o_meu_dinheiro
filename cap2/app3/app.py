import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# --- Informa√ß√£o da aplica√ß√£o ---
APP_INFO = {
    "title": "üí∏ A infla√ß√£o est√° a comer as tuas poupan√ßas?",
    "description": (
        """
        A **infla√ß√£o** faz com que o mesmo dinheiro valha **menos no futuro**.  
        Mesmo que poupes todos os meses, o que hoje custa 10.000 ‚Ç¨ poder√° custar **muito mais daqui a alguns anos**.

        üí° Nesta simula√ß√£o, podes comparar o impacto da infla√ß√£o no teu objetivo e perceber
        quanto **mais** precisas de poupar para manter o mesmo poder de compra.
        """
    ),
    "video": "https://www.youtube.com/watch?v=5rbXGjqHCvk&t=261s"
}

# --- Fun√ß√µes auxiliares ---
def valor_futuro_inflacao(valor_atual, taxa_inflacao, anos):
    """Calcula o valor futuro ajustado pela infla√ß√£o."""
    return valor_atual * ((1 + taxa_inflacao / 100) ** anos)


def calcular_poupanca_mensal_sem_inflacao(objetivo, anos):
    """Poupan√ßa simples (sem infla√ß√£o)."""
    meses = anos * 12
    return objetivo / meses


def calcular_poupanca_mensal_com_inflacao(objetivo, anos, taxa_inflacao):
    """Poupan√ßa ajustada √† infla√ß√£o."""
    objetivo_futuro = valor_futuro_inflacao(objetivo, taxa_inflacao, anos)
    meses = anos * 12
    return objetivo_futuro / meses, objetivo_futuro


def gerar_crescimento(poupanca_mensal, anos):
    """Gera evolu√ß√£o da poupan√ßa (sem rendimentos)."""
    meses = int(anos * 12)
    valores = [poupanca_mensal * i for i in range(1, meses + 1)]
    df = pd.DataFrame({
        "M√™s": np.arange(1, meses + 1),
        "Valor acumulado (‚Ç¨)": valores
    })
    return df


# --- Aplica√ß√£o principal ---
def run():
    st.set_page_config(page_title="A infla√ß√£o est√° a comer as tuas poupan√ßas?", page_icon="üí∏")

    st.title(APP_INFO["title"])
    st.video(APP_INFO["video"])
    st.info(APP_INFO["description"])

    # --- Escolher objetivo ---
    st.subheader("üéØ Define o teu objetivo")
    objetivo_tipo = st.selectbox(
        "Tipo de objetivo:",
        ["Carro", "Casa", "Bicicleta", "Viagem", "Computador", "Outro"]
    )

    preco = st.number_input(
        f"Pre√ßo atual do teu {objetivo_tipo.lower()} (‚Ç¨)",
        min_value=0.0,
        step=100.0,
        value=10000.0 if objetivo_tipo == "Carro" else 2000.0
    )

    anos = st.slider("Prazo para o objetivo (anos)", min_value=1, max_value=30, value=5)

    st.divider()

    # --- Taxa de infla√ß√£o ---
    st.subheader("üìà Taxa de infla√ß√£o")
    inflacao = st.slider("Taxa m√©dia de infla√ß√£o anual (%)", min_value=0.0, max_value=10.0, value=2.0, step=0.1)
    st.caption("‚ÑπÔ∏è Nota: A infla√ß√£o m√©dia em Portugal nas √∫ltimas d√©cadas tem rondado **~2% ao ano** (dados do INE).")

    st.divider()

    # --- C√°lculos principais ---
    poupanca_sem = calcular_poupanca_mensal_sem_inflacao(preco, anos)
    poupanca_com, objetivo_futuro = calcular_poupanca_mensal_com_inflacao(preco, anos, inflacao)

    df_sem = gerar_crescimento(poupanca_sem, anos)
    df_sem["Cen√°rio"] = "Sem infla√ß√£o"

    df_com = gerar_crescimento(poupanca_com, anos)
    df_com["Cen√°rio"] = "Com infla√ß√£o"

    df_total = pd.concat([df_sem, df_com])

    # --- Resultados ---
    st.success(
        f"""
        üè∑Ô∏è **Hoje:** O teu {objetivo_tipo.lower()} custa **{preco:,.0f} ‚Ç¨**  
        üìÖ **Daqui a {anos} anos (com {inflacao:.1f}% de infla√ß√£o):** custar√° cerca de **{objetivo_futuro:,.0f} ‚Ç¨**  

        üí∞ Para o conseguires:
        - Sem infla√ß√£o ‚Üí poupar **{poupanca_sem:,.0f} ‚Ç¨ / m√™s**
        - Com infla√ß√£o ‚Üí precisas de **{poupanca_com:,.0f} ‚Ç¨ / m√™s**
        """
    )

    # --- Gr√°fico comparativo ---
    fig = px.line(
        df_total,
        x="M√™s",
        y="Valor acumulado (‚Ç¨)",
        color="Cen√°rio",
        title="Evolu√ß√£o da poupan√ßa: com e sem infla√ß√£o",
        labels={"M√™s": "Meses", "Valor acumulado (‚Ç¨)": "Total acumulado (‚Ç¨)"},
    )

    # Adicionar linha do pre√ßo ajustado
    fig.add_hline(y=preco, line_dash="dot", annotation_text="Pre√ßo atual", annotation_position="bottom right")
    fig.add_hline(y=objetivo_futuro, line_dash="dot", annotation_text="Pre√ßo futuro (com infla√ß√£o)", annotation_position="top right")

    st.plotly_chart(fig, use_container_width=True)

    st.info(
        "üí° A infla√ß√£o **diminui o poder de compra** das tuas poupan√ßas. "
        "Guardar dinheiro √© importante ‚Äî mas faz√™-lo com consci√™ncia do seu valor real √© essencial!"
    )

    st.caption("Projeto *Todos Contam* ‚Äî Aprender a Gerir o Meu Dinheiro ü™ô")


if __name__ == "__main__":
    run()
